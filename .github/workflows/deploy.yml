name: Build & Deploy to K8s

on:
  push:
    branches: ["main"]

env:
  REGISTRY_ID: crpagrrnlkadtf6n9au1
  IMAGE_NAME: mini-blog
  NAMESPACE: mini-blog
  DEPLOYMENT: mini-blog

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (app + test)
        working-directory: blog_project
        run: |
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt
          pip install pytest pytest-cov pytest-django

      - name: Run tests with coverage
        working-directory: blog_project
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=blog --cov=blog_project \
            --cov-report=xml:/coverage.xml
            mv coverage.xml ../coverage.xml

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          timeout-minutes: 10

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [sonar]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check secrets presence
        run: |
          [ -n "${{ secrets.YC_SA_KEY_JSON_B64 }}" ] || { echo "❌ YC_SA_KEY_JSON_B64 is empty"; exit 1; }
          # эти два нужны только для локального kubectl; при SSH можно не требовать
          # [ -n "${{ secrets.KUBECONFIG_BASE64 }}" ] || { echo "❌ KUBECONFIG_BASE64 is empty"; exit 1; }
          [ -n "${{ secrets.VM_HOST }}" ] || { echo "❌ VM_HOST is empty"; exit 1; }
          [ -n "${{ secrets.VM_USER }}" ] || { echo "❌ VM_USER is empty"; exit 1; }
          [ -n "${{ secrets.VM_SSH_KEY }}" ] || { echo "❌ VM_SSH_KEY is empty"; exit 1; }

      - name: Restore SA key from base64
        run: |
          echo "${{ secrets.YC_SA_KEY_JSON_B64 }}" | base64 -d > sa-key.json
          jq -e . sa-key.json >/dev/null 2>&1 || { echo "❌ sa-key.json invalid JSON"; exit 1; }

      - name: Install yc CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Auth with SA key and get IAM token
        id: iam
        run: |
          yc config set service-account-key sa-key.json
          IAM_TOKEN=$(yc iam create-token)
          [ -n "$IAM_TOKEN" ] || { echo "❌ Failed to obtain IAM token"; exit 1; }
          echo "IAM_TOKEN=${IAM_TOKEN}" >> $GITHUB_OUTPUT

      - name: Docker login to Yandex CR
        run: |
          echo "${{ steps.iam.outputs.IAM_TOKEN }}" | docker login cr.yandex -u iam --password-stdin

      - name: Build & Push image
        working-directory: blog_project
        run: |
          IMAGE="cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          # Опционально: latest
          # docker tag "$IMAGE" "cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest"
          # docker push "cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest"

      - name: Rollout on VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            # Гарантируем доступ к kubeconfig без sudo
            if [ ! -r ~/.kube/config ]; then
              mkdir -p ~/.kube
              sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
              sudo chown "$USER:$USER" ~/.kube/config
            fi

            # Используем тот же тег, что и при пуше
            IMAGE="${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            IMAGE="cr.yandex/$IMAGE"

            sudo kubectl -n "${{ env.NAMESPACE }}" set image deploy/${{ env.DEPLOYMENT }} ${{ env.DEPLOYMENT }}="$IMAGE"
            sudo kubectl -n "${{ env.NAMESPACE }}" rollout status deploy/${{ env.DEPLOYMENT }}